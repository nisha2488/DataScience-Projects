# print (data_hist)
hist(data$A2, col = "blue", border = "black", xlim = c(1,10),
ylim = (1,400), xlab = "Attribute = A2", main = "Histogram for Attribute A2"
)
library(RMySQL)
library(corrplot)
con <- dbConnect(RMySQL::MySQL(),
user='root', password='Nisha@2488',
dbname='dmschema', host='localhost')
rs <- dbSendQuery(con, "select * from cancer_data;")
data <- fetch(rs)
# data_hist <- data[, 2:10]
#dbListResults(con)
#print (data)
# print (data_hist)
hist(data$A2, col = "blue", border = "black", xlim = c(1,10),
ylim = (1,400), xlab = "Attribute A2", main = "Histogram for Attribute A2"
)
library(RMySQL)
library(corrplot)
con <- dbConnect(RMySQL::MySQL(),
user='root', password='Nisha@2488',
dbname='dmschema', host='localhost')
rs <- dbSendQuery(con, "select * from cancer_data;")
data <- fetch(rs)
# data_hist <- data[, 2:10]
#dbListResults(con)
#print (data)
# print (data_hist)
hist(data$A2, col = "blue", border = "black", xlim = c(1,10),
ylim = c(1,400), xlab = "Attribute A2", main = "Histogram for Attribute A2"
)
library(RMySQL)
library(corrplot)
con <- dbConnect(RMySQL::MySQL(),
user='root', password='Nisha@2488',
dbname='dmschema', host='localhost')
rs <- dbSendQuery(con, "select * from cancer_data;")
data <- fetch(rs)
# data_hist <- data[, 2:10]
#dbListResults(con)
#print (data)
# print (data_hist)
hist(data$A2, col = "blue", border = "black", xlim = c(1,10),
ylim = c(1,400), xlab = "Attribute A2", main = "Histogram for Attribute A2",
lines(density(data$A2))
)
library(RMySQL)
library(corrplot)
con <- dbConnect(RMySQL::MySQL(),
user='root', password='Nisha@2488',
dbname='dmschema', host='localhost')
rs <- dbSendQuery(con, "select * from cancer_data;")
data <- fetch(rs)
# data_hist <- data[, 2:10]
#dbListResults(con)
#print (data)
# print (data_hist)
hist(data$A2, col = "blue", border = "black", xlim = c(1,10),
ylim = c(1,400), xlab = "Attribute A2", main = "Histogram for Attribute A2",
lines(density(data$A2), lwd = 2, col = "chocolate3"))
)
library(RMySQL)
library(corrplot)
con <- dbConnect(RMySQL::MySQL(),
user='root', password='Nisha@2488',
dbname='dmschema', host='localhost')
rs <- dbSendQuery(con, "select * from cancer_data;")
data <- fetch(rs)
# data_hist <- data[, 2:10]
#dbListResults(con)
#print (data)
# print (data_hist)
hist(data$A2, col = "blue", border = "black", xlim = c(1,10),
ylim = c(1,400), xlab = "Attribute A2", main = "Histogram for Attribute A2",
lines(density(data$A2), lwd = 2, col = "chocolate3")
)
library(RMySQL)
library(corrplot)
con <- dbConnect(RMySQL::MySQL(),
user='root', password='Nisha@2488',
dbname='dmschema', host='localhost')
rs <- dbSendQuery(con, "select * from cancer_data;")
data <- fetch(rs)
# data_hist <- data[, 2:10]
#dbListResults(con)
#print (data)
# print (data_hist)
hist(data$A2, col = "royalblue", border = "black", xlim = c(1,10),
ylim = c(1,400), xlab = "Attribute A2", main = "Histogram for Attribute A2",
# lines(density(data$A2), lwd = 2, col = "chocolate3")
abline(v = mean(data$A2),col = "red", lwd = 2)
)
library(RMySQL)
library(corrplot)
con <- dbConnect(RMySQL::MySQL(),
user='root', password='Nisha@2488',
dbname='dmschema', host='localhost')
rs <- dbSendQuery(con, "select * from cancer_data;")
data <- fetch(rs)
# data_hist <- data[, 2:10]
#dbListResults(con)
#print (data)
# print (data_hist)
hist(data$A2, col = "royalblue", border = "black", xlim = c(1,10),
ylim = c(1,400), xlab = "Attribute A2", main = "Histogram for Attribute A2",
# lines(density(data$A2), lwd = 2, col = "chocolate3")
abline(v = mean(data$A2),col = "green", lwd = 2),
abline(v = mode(data$A2),col = "red", lwd = 2)
)
library(RMySQL)
library(corrplot)
con <- dbConnect(RMySQL::MySQL(),
user='root', password='Nisha@2488',
dbname='dmschema', host='localhost')
rs <- dbSendQuery(con, "select * from cancer_data;")
data <- fetch(rs)
# data_hist <- data[, 2:10]
#dbListResults(con)
#print (data)
# print (data_hist)
hist(data$A2, col = "royalblue", border = "black", xlim = c(1,10),
ylim = c(1,400), xlab = "Attribute A2", main = "Histogram for Attribute A2",
# lines(density(data$A2), lwd = 2, col = "chocolate3")
abline(v = mean(data$A2),col = "green", lwd = 2),
abline(v = median(data$A2),col = "red", lwd = 2),
abline(v = mode(data$A2),col = "red", lwd = 2),
abline(v = variance(data$A2),col = "red", lwd = 2)
)
library(RMySQL)
library(corrplot)
con <- dbConnect(RMySQL::MySQL(),
user='root', password='Nisha@2488',
dbname='dmschema', host='localhost')
rs <- dbSendQuery(con, "select * from cancer_data;")
data <- fetch(rs)
# data_hist <- data[, 2:10]
#dbListResults(con)
#print (data)
# print (data_hist)
hist(data$A2, col = "royalblue", border = "black", xlim = c(1,10),
ylim = c(1,400), xlab = "Attribute A2", main = "Histogram for Attribute A2",
# lines(density(data$A2), lwd = 2, col = "chocolate3")
abline(v = mean(data$A2),col = "green", lwd = 2),
abline(v = median(data$A2),col = "red", lwd = 2),
abline(v = mode(data$A2),col = "black", lwd = 2)
# abline(v = variance(data$A2),col = "red", lwd = 2)
)
library(RMySQL)
library(corrplot)
con <- dbConnect(RMySQL::MySQL(),
user='root', password='Nisha@2488',
dbname='dmschema', host='localhost')
rs <- dbSendQuery(con, "select * from cancer_data;")
data <- fetch(rs)
# data_hist <- data[, 2:10]
#dbListResults(con)
#print (data)
# print (data_hist)
hist(data$A2, col = "royalblue", border = "black", xlim = c(1,10),
ylim = c(1,400), xlab = "Attribute A2", main = "Histogram for Attribute A2",
# lines(density(data$A2), lwd = 2, col = "chocolate3")
abline(v = mean(data$A2),col = "green", lwd = 2),
abline(v = median(data$A2),col = "red", lwd = 2)
# abline(v = mode(data$A2),col = "black", lwd = 2)
# abline(v = variance(data$A2),col = "red", lwd = 2)
)
library(RMySQL)
library(corrplot)
con <- dbConnect(RMySQL::MySQL(),
user='root', password='Nisha@2488',
dbname='dmschema', host='localhost')
rs <- dbSendQuery(con, "select * from cancer_data;")
data <- fetch(rs)
# data_hist <- data[, 2:10]
#dbListResults(con)
#print (data)
# print (data_hist)
hist(data$A2, col = "royalblue", border = "black", xlim = c(1,10),
ylim = c(1,400), xlab = "Attribute A2", main = "Histogram for Attribute A2",
# lines(density(data$A2), lwd = 2, col = "chocolate3")
abline(v = mean(data$A2),col = "green", lwd = 2),
abline(v = mode(data$A2),col = "red", lwd = 2)
)
library(RMySQL)
library(corrplot)
con <- dbConnect(RMySQL::MySQL(),
user='root', password='Nisha@2488',
dbname='dmschema', host='localhost')
rs <- dbSendQuery(con, "select * from cancer_data;")
data <- fetch(rs)
# data_hist <- data[, 2:10]
#dbListResults(con)
#print (data)
# print (data_hist)
hist(data$A2, col = "blue", border = "black", xlim = c(1,10),
ylim = c(1,400), xlab = "Attribute A2", main = "Histogram for Attribute A2",
# lines(density(data$A2), lwd = 2, col = "chocolate3")
abline(v = mean(data$A2),col = "green", lwd = 2),
abline(v = mode(data$A2), col = "red", lwd = 2)
)
library(RMySQL)
library(corrplot)
con <- dbConnect(RMySQL::MySQL(),
user='root', password='Nisha@2488',
dbname='dmschema', host='localhost')
rs <- dbSendQuery(con, "select * from cancer_data;")
data <- fetch(rs)
# data_hist <- data[, 2:10]
#dbListResults(con)
#print (data)
# print (data_hist)
hist(data$A2, col = "blue", border = "black", xlim = c(1,10),
ylim = c(1,400), xlab = "Attribute A2", main = "Histogram for Attribute A2",
# lines(density(data$A2), lwd = 2, col = "chocolate3")
abline(v = mean(data$temp),col = "green", lwd = 2)
)
library(RMySQL)
library(corrplot)
con <- dbConnect(RMySQL::MySQL(),
user='root', password='Nisha@2488',
dbname='dmschema', host='localhost')
rs <- dbSendQuery(con, "select * from cancer_data;")
data <- fetch(rs)
# data_hist <- data[, 2:10]
#dbListResults(con)
#print (data)
# print (data_hist)
hist(data$A2, col = "blue", border = "black", xlim = c(1,10),
ylim = c(1,400), xlab = "Attribute A2", main = "Histogram for Attribute A2",
lines(density(data$A2), lwd = 2, col = "chocolate3"),
abline(v = mean(data$temp),col = "green", lwd = 2)
)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
library(RMySQL)
library(corrplot)
con <- dbConnect(RMySQL::MySQL(),
user='root', password='Nisha@2488',
dbname='dmschema', host='localhost')
rs <- dbSendQuery(con, "select * from cancer_data;")
data <- fetch(rs)
# data_hist <- data[, 2:10]
#dbListResults(con)
#print (data)
# print (data_hist)
hist(data$A2, col = "blue", border = "black", xlim = c(1,10),
ylim = c(1,400), xlab = "Attribute A2", main = "Histogram for Attribute A2",
lines(density(data$A2), lwd = 2, col = "chocolate3"),
abline(v = mean(data$temp),col = "green", lwd = 2)
)
pulse <- c(88, 76, 84, 64, 60, 64, 60, 64, 68, 74, 68, 68, 72, 76, 72, 52, 72, 64, 60, 56, 72, 88, 80, 76, 64, 72, 60, 76, 88, 72, 64, 60, 60, 72, 92, 80, 72, 64, 68)
head(pulse)
qqnorm(pulse)
length(pulse)
noisy_pulse = pulse + runif(39, min=-0.5, max=0.5)
qqnorm(noisy_pulse)
noisy_pulse = pulse + runif(39, min=-0.75, max=0.75)
qqnorm(noisy_pulse)
noisy_pulse = pulse + runif(39, min=-1.5, max=1.5)
qqnorm(noisy_pulse)
noisy_pulse = pulse + runif(39)
qqnorm(noisy_pulse)
noisy_pulse = pulse + runif(39, min=-1.5, max=1.5)
qqnorm(noisy_pulse)
noisy_pulse = pulse + runif(39, min=-1.75, max=1.75)
qqnorm(noisy_pulse)
noisy_pulse = pulse + runif(39, min=-1.5, max=1.5)
qqnorm(noisy_pulse)
noisy_pulse = pulse + runif(39, min=-1.5, max=1.5)
qqnorm(noisy_pulse)
plot(density(pulse))
par(mfrow=c(2,2))
plot(density(pulse))
plot(density(pulse))
plot(density(pulse))
plot(density(pulse))
plot(density(pulse))
qqnorm(noisy_pulse)
par(mfrow=c(2,2))
qqnorm(noisy_pulse)
qqnorm(noisy_pulse)
qqnorm(noisy_pulse)
qqnorm(noisy_pulse)
par(mfrow=c(2,2))
qqnorm(pulse)
qqnorm(pulse)
qqnorm(pulse)
qqnorm(pulse)
ratio <-IQR(pulse)/sqrt(var(pulse))
ratio
data <- c(0.246, 0.327, 0.423, 0.425, 0.434, 0.530, 0.583, 0.613, 0.641, 1.054, 1.098, 1.158, 1.163, 1.439, 1.464, 2.063, 2.105, 2.106, 4.363, 7.517)
data
plot(ecdf(data))
par(mfrow=c(1,1))
plot(ecdf(data))
mean(data)
mean(data^2) - mean(data)^2
quantile(data, 0.5 , type=2)
quantile(data, 0.75 , type=2) - quantile(data, 0.25 , type=2)
IQR <-quantile(data, 0.75, type=2) - quantile(data, 0.25, type=2)
plugin_var <- mean(data^2) - mean(data)^2
ratio <- IQR/sqrt(plugin_var)
ratio
qqnorm(data)
qqnorm(log(data))
y <- log(data)
IQR_y <-quantile(y, 0.75, type=2) - quantile(y, 0.25, type=2)
plugin_var_y <- mean(y^2) - mean(y)^2
ratio_y <- IQR_y/sqrt(plugin_var_y)
ratio_y
qqnorm(y)
qqnorm(y)
1 - pnorm(50,4,2)
pnorm(50,4,2)
1 - pnorm(50,4,2)
1 - pnorm(0,4,2)
1 - pnorm(0,0,10)
1 - pnorm(20,0,10)
1 - pnorm(20,4,2)
pnorm(1.5, 0, 0.14) – pnorm(-1.5, 0, 0.14)
pnorm(1.5, 0, 0.14) - pnorm(-1.5, 0, 0.14)
pnorm(0.5, 0, 0.14) - pnorm(-0.5, 0, 0.14)
1 – pnorm(0.5, 0, sqrt(16.2/100))
1 - pnorm(0.5, 0, sqrt(16.2/100))
1 – pnorm(0, 4, 2)
1 - pnorm(0, 4, 2)
1 - pnorm(0, 0, 10)
1 - pnorm(19, 4, 2)
1 - pnorm(19, 0, 10)
1 - pnorm(0, -4, 104)
1 - pnorm(0, 4, 104)
1 - pnorm(0, -4, sqrt(104)
kh
1 - pnorm(0, -4, sqrt(104))
1 - pnorm(0, -4, sqrt(104))
noisy_pulse = pulse + runif(39, min=-1.5, max=1.5)
noisy_pulse = pulse + runif(39, min=-1.5, max=1.5)
qqnorm(noisy_pulse)
noisy_pulse = pulse + runif(39, min=-2, max=2)
qqnorm(noisy_pulse)
y
IQR_y
summary(y)
-0.68480 - 0.46690
0.46690 + 0.68480
quantile(y, 0.75, type=2) - quantile(y, 0.25, type=2)
IQR(Y)
IQR(y)
ratio_y = IQR(y)/sqrt(plugin_var_y)
ratio_y
ratio_y = IQR(y)/sqrt(var(y))
ratio
ratio_y = IQR(y)/sqrt(var(y))
ratio_y
quantile(y, 0.75) - quantile(y, 0.25)
quantile(y, 0.75) - quantile(y, 0.25)/sqrt(mean(y^2) - mean(y)^2)
plot(density(pulse))
plot(density(y))
install.packages("mice")
library(mice)
library(mice)
getwd()
setwd("C:/Users/Nisha Chandwani/Documents/DM/DM Projects/Housing Data")
getwd()
train_data <- read.csv("train.csv")
head(train_data)
length(train.data)
length(train_data)
count.fields(train_data)
nrow(train_data)
train_data <- read.csv("test.csv")
train_data <- read.csv("train.csv")
test_data <- read.csv("test.csv")
length(train_data)
nrow(train_data)
length(test_data)
nrow(test_data)
test_data$SalePrice <- rep(NA, 1459)
length(test_data)
df <- rbind(train, test)
df <- rbind(train_data, test_data)
head(df)
length(df)
nrow(df)
housing_data <- rbind(train_data, test_data)
nrow(df)
nrow(housing_data)
str(housing_data)
summary(housing_data)
md.pattern(housing_data)
summary(train_data)
summary(test_data)
housing_data$Alley
housing_data[is.na(housing_data$Alley)] <- 'None'
housing_data$Alley[is.na(housing_data$Alley)] <- 'None'
housing_data$Alley
summary(housing_data)
na.zero <- function (x) {
x[is.na(x)] <- 0
return(x)
}
na.zero(housing_data$Alley)
md.pattern(housing_data)
str(housing_data)
train_data <- read.csv("train.csv", stringsAsFactors=FALSE)
test_data <- read.csv("test.csv", stringsAsFactors=FALSE)
test_data$SalePrice <- rep(NA, 1459)
housing_data <- rbind(train_data, test_data)
housing_data$Alley[is.na(housing_data$Alley)] <- 'None'
summary(housing_data)
str(housing_data)
housing_data$Alley <- as.factor(housing_data$Alley)
str(housing_data)
train_data <- read.csv("train.csv")
test_data <- read.csv("test.csv")
# Adding Sale Price column to test data
test_data$SalePrice <- rep(NA, 1459)
# Merge the train and test datasets
housing_data <- rbind(train_data, test_data)
housing_data$Alley[is.na(housing_data$Alley)] <- 'None'
str(housing_data)
na_to_none <- function (x) {
x <- as.character(x)
x[is.na(x)] <- 'None'
x <- as.factor(x)
return(x)
}
na_to_none(housing_data$Alley)
summary(housing_data$Alley)
housing_data$Alley
na_to_none <- function (x) {
x <- as.character(x)
x[is.na(x)] <- 'None'
x <- as.factor(x)
return(x)
}
na_to_none(housing_data$Alley)
na_to_none <- function (x) {
x <- as.character(x)
x[is.na(x)] <- 'None'
x <- as.factor(x)
housing_data$Alley
return(x)
}
na_to_none(housing_data$Alley)
housing_data$Alley
na_to_none <- function (x) {
x <- as.character(x)
x[is.na(x)] <- 'None'
x <- as.factor(x)
housing_data$Alley
return(x)
}
housing_data$Alley <- na_to_none(housing_data$Alley)
housing_data$Alley
housing_data$Alley
summary(housing_data$Alley)
train_data <- read.csv("train.csv")
test_data <- read.csv("test.csv")
test_data$SalePrice <- rep(NA, 1459)
# Funtion to convert NA to None or 0
na_to_val <- function (col, value ) {
col <- as.character(col)
col[is.na(col)] <- value
col <- as.factor(col)
return(col)
}
# Replace NA's with 'None' wherever required in training and test datasets
train_data$Alley <- na_to_val(housing_data$Alley, 'None')
test_data$Alley <- na_to_val(housing_data$Alley, 'None')
test_data$BsmtFullBath <- na_to_val(housing_data$BsmtFullBath, 0)
test_data$BsmtHalfBath <- na_to_val(housing_data$BsmtHalfBath, 0)
train_data$FireplaceQu <- na_to_val(housing_data$FireplaceQu, 0)
test_data$FireplaceQu <- na_to_val(housing_data$FireplaceQu, 0)
train_data$Fence <- na_to_val(housing_data$Fence, 0)
test_data$Fence <- na_to_val(housing_data$Fence, 0)
# Replace NA's with 'None' wherever required in training and test datasets
train_data$Alley <- na_to_val(train_data$Alley, 'None')
test_data$Alley <- na_to_val(test_data$Alley, 'None')
test_data$BsmtFullBath <- na_to_val(test_data$BsmtFullBath, 0)
test_data$BsmtHalfBath <- na_to_val(test_data$BsmtHalfBath, 0)
train_data$FireplaceQu <- na_to_val(train_data$FireplaceQu, 0)
test_data$FireplaceQu <- na_to_val(test_data$FireplaceQu, 0)
train_data$Fence <- na_to_val(train_data$Fence, 0)
test_data$Fence <- na_to_val(test_data$Fence, 0)
summary(train_data)
train_data <- read.csv("train.csv")
test_data <- read.csv("test.csv")
summary(train_data)
# Replace NA's with 'None' wherever required in training and test datasets
train_data$Alley <- na_to_val(train_data$Alley, 'None')
test_data$Alley <- na_to_val(test_data$Alley, 'None')
test_data$BsmtFullBath <- na_to_val(test_data$BsmtFullBath, 0)
test_data$BsmtHalfBath <- na_to_val(test_data$BsmtHalfBath, 0)
train_data$FireplaceQu <- na_to_val(train_data$FireplaceQu, 'None')
test_data$FireplaceQu <- na_to_val(test_data$FireplaceQu, 'None')
train_data$Fence <- na_to_val(train_data$Fence, 'None')
test_data$Fence <- na_to_val(test_data$Fence, 'None')
summary(train_data$Alley)
summary(train_data$FireplaceQu)
summary(train_data$Fence)
summary(test_data$Alley)
summary(test_data$FireplaceQu)
summary(test_data$Fence)
summary(test_data$BsmtFullBath)
summary(test_data$BsmtHalfBath)
